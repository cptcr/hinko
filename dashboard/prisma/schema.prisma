// dashboard/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id
  username    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userLevels     UserLevel[]
  warns          Warn[]
  moderatedWarns Warn[] @relation("ModeratorWarns")
  polls          Poll[]
  giveaways      Giveaway[]
  tickets        Ticket[]
  customCommands CustomCommand[]
  quarantineEntries QuarantineEntry[]
  moderatedQuarantine QuarantineEntry[] @relation("ModeratorQuarantine")

  @@map("users")
}

model Guild {
  id                     String  @id
  name                   String
  prefix                 String  @default("!")
  
  // Channel Configuration
  modLogChannelId        String?
  levelUpChannelId       String?
  geizhalsChannelId      String?
  welcomeChannelId       String?
  joinToCreateChannelId  String?
  joinToCreateCategoryId String?
  
  // Role Configuration
  quarantineRoleId       String?
  
  // Feature Toggles
  enableLeveling         Boolean @default(true)
  enableModeration       Boolean @default(true)
  enableGeizhals         Boolean @default(false)
  enablePolls            Boolean @default(true)
  enableGiveaways        Boolean @default(true)
  enableAutomod          Boolean @default(false)
  enableTickets          Boolean @default(false)
  enableMusic            Boolean @default(false)
  enableJoinToCreate     Boolean @default(false)
  
  // Messages
  welcomeMessage         String?
  leaveMessage           String?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  userLevels       UserLevel[]
  warns            Warn[]
  levelRewards     LevelReward[]
  polls            Poll[]
  giveaways        Giveaway[]
  tickets          Ticket[]
  customCommands   CustomCommand[]
  geizhalsTrackers GeizhalsTracker[]
  quarantineEntries QuarantineEntry[]
  automodRules     AutomodRule[]

  @@map("guilds")
}

model UserLevel {
  id        Int      @id @default(autoincrement())
  userId    String
  guildId   String
  xp        Int      @default(0)
  level     Int      @default(0)
  messages  Int      @default(0)
  voiceTime Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId])
  @@map("user_levels")
}

model LevelReward {
  id          Int      @id @default(autoincrement())
  guildId     String
  level       Int
  roleId      String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, level])
  @@map("level_rewards")
}

model Warn {
  id          Int      @id @default(autoincrement())
  userId      String
  guildId     String
  moderatorId String
  reason      String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild     Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  moderator User  @relation("ModeratorWarns", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@map("warns")
}

model QuarantineEntry {
  id          Int      @id @default(autoincrement())
  targetId    String
  targetType  String   // USER, CHANNEL, ROLE
  guildId     String
  moderatorId String
  reason      String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guild     Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  moderator User  @relation("ModeratorQuarantine", fields: [moderatorId], references: [id], onDelete: Cascade)
  user      User? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@map("quarantine_entries")
}

model AutomodRule {
  id             Int      @id @default(autoincrement())
  guildId        String
  name           String
  type           String
  enabled        Boolean  @default(true)
  trigger        Json
  action         Json
  exemptRoles    String[]
  exemptChannels String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("automod_rules")
}

model Poll {
  id          Int      @id @default(autoincrement())
  guildId     String
  channelId   String
  messageId   String?
  title       String
  description String?
  creatorId   String
  multiple    Boolean  @default(false)
  anonymous   Boolean  @default(false)
  active      Boolean  @default(true)
  endTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guild   Guild        @relation(fields: [guildId], references: [id], onDelete: Cascade)
  creator User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  options PollOption[]
  votes   PollVote[]

  @@map("polls")
}

model PollOption {
  id         Int    @id @default(autoincrement())
  pollId     Int
  text       String
  emoji      String?
  orderIndex Int    @default(0)

  // Relations
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]

  @@map("poll_options")
}

model PollVote {
  id       Int    @id @default(autoincrement())
  pollId   Int
  optionId Int
  userId   String

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([pollId, optionId, userId])
  @@map("poll_votes")
}

model Giveaway {
  id              Int      @id @default(autoincrement())
  guildId         String
  channelId       String
  messageId       String?
  title           String
  description     String?
  prize           String
  winners         Int      @default(1)
  creatorId       String
  endTime         DateTime
  active          Boolean  @default(true)
  ended           Boolean  @default(false)
  winnerUserIds   String[]
  requiredRole    String?
  requiredLevel   Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  guild   Guild             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  creator User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  entries GiveawayEntry[]

  @@map("giveaways")
}

model GiveawayEntry {
  id         Int @id @default(autoincrement())
  giveawayId Int
  userId     String

  // Relations
  giveaway Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)

  @@unique([giveawayId, userId])
  @@map("giveaway_entries")
}

model Ticket {
  id          Int       @id @default(autoincrement())
  guildId     String
  channelId   String
  userId      String
  moderatorId String?
  category    String
  subject     String
  status      String    @default("OPEN") // OPEN, IN_PROGRESS, WAITING, CLOSED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model CustomCommand {
  id          Int      @id @default(autoincrement())
  guildId     String
  name        String
  response    String
  description String?
  enabled     Boolean  @default(true)
  creatorId   String
  uses        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guild   Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  creator User  @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([guildId, name])
  @@map("custom_commands")
}

model GeizhalsTracker {
  id         Int      @id @default(autoincrement())
  guildId    String
  channelId  String
  productUrl String
  productId  String
  name       String
  minPrice   Float?
  maxPrice   Float?
  active     Boolean  @default(true)
  lastPrice  Float?
  lastCheck  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("geizhals_trackers")
}