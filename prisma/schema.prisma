// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                String   @id
  name              String
  prefix            String   @default("!")
  modLogChannelId   String?
  levelUpChannelId  String?
  quarantineRoleId  String?
  geizhalsChannelId String?
  welcomeChannelId  String?
  enableLeveling    Boolean  @default(true)
  enableModeration  Boolean  @default(true)
  enableGeizhals    Boolean  @default(false)
  enablePolls       Boolean  @default(true)
  enableGiveaways   Boolean  @default(true)
  enableAutomod     Boolean  @default(false)
  enableTickets     Boolean  @default(false)
  enableMusic       Boolean  @default(false)
  automodSettings   Json?    // Automod konfiguration
  welcomeMessage    String?
  leaveMessage      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationen
  warns             Warn[]
  userLevels        UserLevel[]
  levelRewards      LevelReward[]
  quarantineEntries QuarantineEntry[]
  geizhalsTrackers  GeizhalsTracker[]
  polls             Poll[]
  giveaways         Giveaway[]
  automodRules      AutomodRule[]
  tickets           Ticket[]
  customCommands    CustomCommand[]
  reactionRoles     ReactionRole[]

  @@map("guilds")
}

model User {
  id        String   @id
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  warns             Warn[]
  userLevels        UserLevel[]
  quarantineEntries QuarantineEntry[]
  geizhalsTrackers  GeizhalsTracker[]
  moderatedWarns    Warn[]            @relation("ModeratorWarns")
  moderatedQuarantine QuarantineEntry[] @relation("ModeratorQuarantine")
  pollVotes         PollVote[]
  giveawayEntries   GiveawayEntry[]
  tickets           Ticket[]          @relation("TicketUser")
  moderatedTickets  Ticket[]          @relation("TicketModerator")

  @@map("users")
}

model Warn {
  id           Int      @id @default(autoincrement())
  userId       String
  guildId      String
  moderatorId  String
  reason       String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationen
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild     Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  moderator User  @relation("ModeratorWarns", fields: [moderatorId], references: [id])

  @@map("warns")
}

model UserLevel {
  id              Int      @id @default(autoincrement())
  userId          String
  guildId         String
  xp              Int      @default(0)
  level           Int      @default(0)
  messages        Int      @default(0)
  voiceTime       Int      @default(0) // in Sekunden
  lastMessageTime DateTime?
  lastVoiceJoin   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationen
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId])
  @@map("user_levels")
}

model LevelReward {
  id          Int      @id @default(autoincrement())
  guildId     String
  level       Int
  roleId      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationen
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, level])
  @@map("level_rewards")
}

model QuarantineEntry {
  id          Int                @id @default(autoincrement())
  guildId     String
  targetId    String
  targetType  QuarantineType
  moderatorId String
  reason      String
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relationen
  guild     Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  moderator User  @relation("ModeratorQuarantine", fields: [moderatorId], references: [id])

  @@map("quarantine_entries")
}

model GeizhalsTracker {
  id           Int      @id @default(autoincrement())
  guildId      String
  productId    String
  productName  String
  targetPrice  Float
  currentPrice Float
  category     String
  userId       String
  notified     Boolean  @default(false)
  lastCheck    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationen
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, productId, userId])
  @@map("geizhals_trackers")
}

model MonthlyLeaderboard {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  month     Int      // 1-12
  year      Int
  xpGained  Int      @default(0)
  messages  Int      @default(0)
  voiceTime Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId, month, year])
  @@map("monthly_leaderboards")
}

// Poll System
model Poll {
  id            Int      @id @default(autoincrement())
  guildId       String
  channelId     String
  messageId     String?
  title         String
  description   String?
  creatorId     String
  multiple      Boolean  @default(false)
  anonymous     Boolean  @default(false)
  endTime       DateTime?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationen
  guild   Guild        @relation(fields: [guildId], references: [id], onDelete: Cascade)
  options PollOption[]
  votes   PollVote[]

  @@map("polls")
}

model PollOption {
  id          Int      @id @default(autoincrement())
  pollId      Int
  text        String
  emoji       String?
  orderIndex  Int
  createdAt   DateTime @default(now())

  // Relationen
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]

  @@map("poll_options")
}

model PollVote {
  id         Int      @id @default(autoincrement())
  pollId     Int
  optionId   Int
  userId     String
  createdAt  DateTime @default(now())

  // Relationen
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, optionId, userId])
  @@map("poll_votes")
}

// Giveaway System
model Giveaway {
  id            Int      @id @default(autoincrement())
  guildId       String
  channelId     String
  messageId     String?
  title         String
  description   String?
  prize         String
  winners       Int      @default(1)
  creatorId     String
  endTime       DateTime
  requirements  Json?    // Requirements for entry
  active        Boolean  @default(true)
  ended         Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationen
  guild   Guild           @relation(fields: [guildId], references: [id], onDelete: Cascade)
  entries GiveawayEntry[]

  @@map("giveaways")
}

model GiveawayEntry {
  id         Int      @id @default(autoincrement())
  giveawayId Int
  userId     String
  createdAt  DateTime @default(now())

  // Relationen
  giveaway Giveaway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([giveawayId, userId])
  @@map("giveaway_entries")
}

// Automod System
model AutomodRule {
  id          Int              @id @default(autoincrement())
  guildId     String
  name        String
  type        AutomodRuleType
  enabled     Boolean          @default(true)
  trigger     Json             // Trigger configuration
  action      Json             // Action configuration
  exemptRoles String[]         // Role IDs exempt from this rule
  exemptChannels String[]      // Channel IDs exempt from this rule
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationen
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("automod_rules")
}

// Ticket System
model Ticket {
  id            Int           @id @default(autoincrement())
  guildId       String
  channelId     String
  userId        String
  moderatorId   String?
  category      String        @default("general")
  subject       String
  status        TicketStatus  @default(OPEN)
  priority      TicketPriority @default(MEDIUM)
  closedAt      DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationen
  guild     Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user      User  @relation("TicketUser", fields: [userId], references: [id])
  moderator User? @relation("TicketModerator", fields: [moderatorId], references: [id])

  @@map("tickets")
}

// Custom Commands
model CustomCommand {
  id          Int      @id @default(autoincrement())
  guildId     String
  name        String
  response    String
  description String?
  enabled     Boolean  @default(true)
  creatorId   String
  uses        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationen
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, name])
  @@map("custom_commands")
}

// Reaction Roles
model ReactionRole {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String
  messageId String
  emoji     String
  roleId    String
  createdAt DateTime @default(now())

  // Relationen
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([messageId, emoji])
  @@map("reaction_roles")
}

enum QuarantineType {
  USER
  CHANNEL
  ROLE
}

enum AutomodRuleType {
  SPAM
  CAPS
  MENTIONS
  LINKS
  INVITES
  PROFANITY
  REPEATED_TEXT
  ZALGO
  EMOJI_SPAM
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}