generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id         String   @id
  language   String   @default("en")
  xpEnabled  Boolean  @default(true)
  xpMin      Int      @default(15)
  xpMax      Int      @default(25)
  xpCooldown Int      @default(60000)
  xpRate     Float    @default(1.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  communitySettings CommunitySettings?
  confessions      Confession[]
  suggestions      Suggestion[]
  reports          Report[]
  compliments      Compliment[]
  quotes           Quote[]
  birthdays        Birthday[]
  users         User[]
  levelRoles    LevelRole[]
  monthlyResets MonthlyReset[]
  warns         Warn[]
  modActions    ModAction[]
  quarantines   Quarantine[]
  ticketSystems TicketSystem[]
  tickets       Ticket[]
  polls         Poll[]
  socialInteractions SocialInteraction[]
  gameStats         GameStats[]
  socialReactions SocialReaction[]
}

model User {
  id         String   @id
  guildId    String
  username   String
  xp         Int      @default(0)
  level      Int      @default(0)
  totalXp    Int      @default(0)
  monthlyXp  Int      @default(0)
  lastMessage DateTime?
  lastReset  DateTime @default(now())
  language   String?
  cardTheme  String   @default("default")
  cardColor  String   @default("#7289da")
  cardBg     String?
  frozen     Boolean  @default(false)
  frozenBy   String?
  frozenUntil DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  guild      Guild    @relation(fields: [guildId], references: [id])
  xpHistory  XPHistory[]
  warns      Warn[]
  modActions ModAction[]
  quarantine Quarantine?
  tickets    Ticket[]
  ticketMessages TicketMessage[]
  pollVotes  PollVote[]

  @@unique([id, guildId], name: "id_guildId")
  @@index([guildId])
  @@index([xp])
  @@index([monthlyXp])
}

model LevelRole {
  id       Int      @id @default(autoincrement())
  guildId  String
  level    Int
  roleId   String
  createdAt DateTime @default(now())

  guild    Guild    @relation(fields: [guildId], references: [id])

  @@unique([guildId, level])
}

model XPHistory {
  id        Int      @id @default(autoincrement())
  userId    String
  guildId   String
  xpGained  Int
  reason    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId, guildId], references: [id, guildId])

  @@index([userId, guildId])
  @@index([createdAt])
}

model MonthlyReset {
  id        Int      @id @default(autoincrement())
  guildId   String
  userCount Int
  resetDate DateTime

  guild     Guild    @relation(fields: [guildId], references: [id])

  @@index([guildId])
  @@index([resetDate])
}

model Warn {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  moderatorId String
  reason     String
  createdAt  DateTime @default(now())
  expiresAt  DateTime?
  active     Boolean  @default(true)
  deletedAt  DateTime?
  deletedBy  String?
  
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  guild      Guild    @relation(fields: [guildId], references: [id])
  history    WarnHistory[]
  
  @@index([userId, guildId])
  @@index([guildId, active])
  @@index([expiresAt])
}

model WarnHistory {
  id         Int      @id @default(autoincrement())
  warnId     Int
  moderatorId String
  action     String
  oldReason  String?
  newReason  String?
  oldExpiry  DateTime?
  newExpiry  DateTime?
  createdAt  DateTime @default(now())
  
  warn       Warn     @relation(fields: [warnId], references: [id])
  
  @@index([warnId])
}

model ModAction {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  moderatorId String
  action     String
  reason     String?
  duration   Int?
  createdAt  DateTime @default(now())
  expiresAt  DateTime?
  active     Boolean  @default(true)
  
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  guild      Guild    @relation(fields: [guildId], references: [id])
  
  @@index([userId, guildId])
  @@index([guildId, action])
  @@index([expiresAt])
}

model Quarantine {
  id         Int      @id @default(autoincrement())
  userId     String
  guildId    String
  moderatorId String
  reason     String
  roleIds    String[]
  createdAt  DateTime @default(now())
  active     Boolean  @default(true)
  
  user       User     @relation(fields: [userId, guildId], references: [id, guildId])
  guild      Guild    @relation(fields: [guildId], references: [id])
  
  @@unique([userId, guildId])
  @@index([guildId, active])
}

model TicketSystem {
  id               String   @id @default(cuid())
  guildId          String
  name             String
  categoryId       String
  supportRoleIds   String[]
  welcomeMessage   String   @default("Welcome to your ticket! A staff member will be with you shortly.")
  maxTicketsPerUser Int     @default(3)
  transcriptChannel String?
  panelChannelId   String?
  panelMessageId   String?
  panelTitle       String   @default("Support Tickets")
  panelDescription String   @default("Click the button below to create a ticket")
  panelButtonLabel String   @default("Create Ticket")
  panelButtonEmoji String   @default("ðŸ“©")
  enabled          Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  guild    Guild     @relation(fields: [guildId], references: [id])
  tickets  Ticket[]

  @@index([guildId])
}

model Ticket {
  id         Int      @id @default(autoincrement())
  guildId    String
  systemId   String
  userId     String
  channelId  String
  number     Int
  status     String   @default("open")
  claimedBy  String?
  closedBy   String?
  closedAt   DateTime?
  locked     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  guild      Guild           @relation(fields: [guildId], references: [id])
  system     TicketSystem    @relation(fields: [systemId], references: [id])
  user       User            @relation(fields: [userId, guildId], references: [id, guildId])
  messages   TicketMessage[]

  @@unique([guildId, number])
  @@index([userId, guildId])
  @@index([status])
  @@index([systemId])
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  Int
  userId    String
  guildId   String
  content   String
  createdAt DateTime @default(now())

  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId, guildId], references: [id, guildId])

  @@index([ticketId])
}

model Poll {
  id          String   @id @default(cuid())
  guildId     String
  messageId   String   @unique
  channelId   String
  creatorId   String
  title       String
  description String?
  imageUrl    String?
  endTime     DateTime?
  maxVotes    Int      @default(1)
  allowChange Boolean  @default(true)
  showResults Boolean  @default(true)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  guild    Guild        @relation(fields: [guildId], references: [id])
  options  PollOption[]
  votes    PollVote[]

  @@index([guildId])
  @@index([active])
}

model PollOption {
  id       String @id @default(cuid())
  pollId   String
  optionId Int
  label    String
  emoji    String?

  poll     Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes    PollVote[]

  @@unique([pollId, optionId])
  @@index([pollId])
}

model PollVote {
  id       String   @id @default(cuid())
  pollId   String
  optionId String
  userId   String
  guildId  String
  votedAt  DateTime @default(now())

  poll     Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId, guildId], references: [id, guildId])

  @@unique([pollId, userId])
  @@index([pollId])
  @@index([userId, guildId])
}

model CommunitySettings {
  id                   String   @id @default(cuid())
  guildId              String   @unique
  confessionChannelId  String?
  confessionEnabled    Boolean  @default(false)
  suggestionChannelId  String?
  suggestionEnabled    Boolean  @default(false)
  reportChannelId      String?
  reportEnabled        Boolean  @default(false)
  birthdayChannelId    String?
  birthdayEnabled      Boolean  @default(false)
  complimentChannelId  String?
  complimentEnabled    Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  guild               Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
}

model Confession {
  id                 Int                   @id @default(autoincrement())
  guildId           String
  userId            String
  number            Int
  content           String
  createdAt         DateTime              @default(now())

  guild             Guild                 @relation(fields: [guildId], references: [id], onDelete: Cascade)
  reactions         ConfessionReaction[]

  @@unique([guildId, number])
  @@index([guildId])
  @@index([userId])
}

model ConfessionReaction {
  id                String   @id @default(cuid())
  confessionNumber  Int
  userId            String
  guildId           String
  emoji             String
  createdAt         DateTime @default(now())

  confession        Confession @relation(fields: [confessionNumber, guildId], references: [number, guildId], onDelete: Cascade)

  @@unique([confessionNumber, userId, guildId])
  @@index([confessionNumber, guildId])
}

model Suggestion {
  id            String           @id @default(cuid())
  guildId       String
  userId        String
  messageId     String?
  number        Int
  title         String
  description   String
  category      String           @default("general")
  status        String           @default("pending")
  adminComment  String?
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  guild         Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  votes         SuggestionVote[]

  @@unique([guildId, number])
  @@index([guildId])
  @@index([userId])
  @@index([status])
}

model SuggestionVote {
  id           String     @id @default(cuid())
  suggestionId String
  userId       String
  voteType     String
  createdAt    DateTime   @default(now())

  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@unique([suggestionId, userId])
  @@index([suggestionId])
}

model Report {
  id             Int       @id @default(autoincrement())
  guildId        String
  reporterId     String
  reportedUserId String?
  number         Int
  reason         String
  evidence       String?
  status         String    @default("open")
  handledBy      String?
  handledAt      DateTime?
  createdAt      DateTime  @default(now())

  guild          Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, number])
  @@index([guildId])
  @@index([reporterId])
  @@index([status])
}

model Compliment {
  id         String   @id @default(cuid())
  guildId    String
  senderId   String
  receiverId String
  message    String
  anonymous  Boolean  @default(false)
  createdAt  DateTime @default(now())

  guild      Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([receiverId])
  @@index([senderId])
}

model Quote {
  id         String   @id @default(cuid())
  guildId    String
  addedBy    String
  text       String
  authorId   String?
  authorName String
  createdAt  DateTime @default(now())

  guild      Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([addedBy])
}

model Birthday {
  id       String   @id @default(cuid())
  userId   String
  guildId  String
  date     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild    Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([guildId])
  @@index([date])
}

model SocialInteraction {
  id         String   @id @default(cuid())
  guildId    String
  senderId   String
  receiverId String?
  action     String
  message    String?
  createdAt  DateTime @default(now())

  guild      Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([senderId])
  @@index([receiverId])
  @@index([action])
}

model GameStats {
  id            String   @id @default(cuid())
  userId        String
  guildId       String
  game          String
  gamesPlayed   Int      @default(0)
  gamesWon      Int      @default(0)
  totalWinnings Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  guild         Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId, game])
  @@index([guildId])
  @@index([userId])
  @@index([game])
}

model SocialReaction {
  id            String   @id @default(cuid())
  interactionId String
  userId        String
  guildId       String
  emoji         String
  createdAt     DateTime @default(now())

  guild         Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([interactionId, userId])
  @@index([guildId])
  @@index([interactionId])
}