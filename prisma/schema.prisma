// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                    String           @id
  name                  String
  prefix                String           @default("!")
  settings             Json?            @default("{}")
  enableLeveling       Boolean          @default(false)
  enableModeration     Boolean          @default(false)
  enableGeizhals       Boolean          @default(false)
  enablePolls          Boolean          @default(false)
  enableGiveaways      Boolean          @default(false)
  enableAutomod        Boolean          @default(false)
  enableTickets        Boolean          @default(false)
  enableMusic          Boolean          @default(false)
  enableJoinToCreate   Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  warns                 Warn[]
  tickets              Ticket[]
  polls                Poll[]
  giveaways           Giveaway[]
  levelRewards         LevelReward[]
  userLevels          UserLevel[]
  customCommands      CustomCommand[]
  geizhalsProducts    GeizhalsProduct[]
  j2cSettings         J2CSettings?
  j2cChannels         J2CChannel[]
  ticketCategories    TicketCategory[]
  quarantineEntries   QuarantineEntry[]
  modLogs             ModLog[]
}

model User {
  id        String     @id
  username  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  warns     Warn[]
  tickets   Ticket[]
  levels    UserLevel[]
}

model Warn {
  id          Int      @id @default(autoincrement())
  guildId     String
  userId      String
  moderatorId String
  reason      String
  createdAt   DateTime @default(now())
  guild       Guild    @relation(fields: [guildId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([guildId])
  @@index([userId])
}

model ModLog {
  id          Int      @id @default(autoincrement())
  guildId     String
  type        String
  targetId    String
  moderatorId String
  reason      String?
  duration    Int?     // Duration in milliseconds
  createdAt   DateTime @default(now())
  guild       Guild    @relation(fields: [guildId], references: [id])

  @@index([guildId])
}

model GeizhalsProduct {
  id           Int      @id @default(autoincrement())
  guildId      String
  url          String
  name         String
  currentPrice Float
  lastPrice    Float
  lowestPrice  Float
  highestPrice Float
  channelId    String
  threshold    Float    @default(0)
  lastChecked  DateTime @default(now())
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guild        Guild    @relation(fields: [guildId], references: [id])

  @@index([guildId])
}

model J2CChannel {
  id          String   @id
  guildId     String
  ownerId     String
  parentId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guild       Guild    @relation(fields: [guildId], references: [id])

  @@index([guildId])
}

model J2CSettings {
  id                  Int       @id @default(autoincrement())
  guildId             String    @unique
  categoryId          String?
  channelNameTemplate String?   @default("{user}'s Channel")
  defaultUserLimit    Int       @default(0)
  defaultBitrate     Int       @default(64000)
  allowTextChannel   Boolean   @default(false)
  autoDeleteEmpty    Boolean   @default(true)
  lockEmptyChannels  Boolean   @default(false)
  blacklistedUsers   String[]  @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  guild              Guild     @relation(fields: [guildId], references: [id])
}

// Add any other missing models...